{"version":3,"sources":["components/Navigation.js","firebaseApp.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["Navigation","currentUser","style","display","justifyContent","marginTop","marginBottom","to","marginRight","icon","faTwitter","color","size","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","firestoreService","firestore","storageService","storage","Tweet","tweet","isOwner","useState","isEditable","setIsEditable","text","newTweetText","setNewTweetText","onDeleteClick","a","window","confirm","doc","id","delete","attachmentUrl","refFromURL","onEditClick","prev","onSubmit","event","preventDefault","update","className","onChange","value","target","required","placeholder","autoFocus","type","onClick","src","alt","width","height","faTrash","faPencilAlt","TweetFactory","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidV4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","htmlFor","faPlus","accept","file","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","newTweets","docs","map","document","data","AuthForm","email","setEmail","password","setPassword","isNewAccount","setIsNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faGoogle","faGithub","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isSignedIn","maxWidth","margin","exact","path","App","isInit","setIsInit","setCurrentUser","onAuthStateChanged","user","args","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2994941d.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Navigation = ({ currentUser }) => {\r\n  return (\r\n    <nav>\r\n      <ul\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          marginTop: 50,\r\n          marginBottom: 100,\r\n        }}\r\n      >\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {currentUser.displayName\r\n                ? `${currentUser.displayName}의 프로필`\r\n                : '프로필'}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const firestoreService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { Fragment, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { firestoreService, storageService } from 'firebaseApp';\r\n\r\nconst Tweet = ({ tweet, isOwner }) => {\r\n  const [isEditable, setIsEditable] = useState(false);\r\n  const [newTweetText, setNewTweetText] = useState(tweet.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const isDeleted = window.confirm('트윗을 삭제하시겠습니까?');\r\n\r\n    if (isDeleted) {\r\n      await firestoreService.doc(`tweets/${tweet.id}`).delete();\r\n\r\n      if (tweet.attachmentUrl !== '') {\r\n        await storageService.refFromURL(tweet.attachmentUrl).delete();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEditClick = () => setIsEditable((prev) => !prev);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setNewTweetText(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await firestoreService\r\n      .doc(`tweets/${tweet.id}`)\r\n      .update({ text: newTweetText });\r\n    setIsEditable(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweet\">\r\n      {isEditable ? (\r\n        <Fragment>\r\n          <form onSubmit={onSubmit} className=\"container tweet-edit\">\r\n            <input\r\n              onChange={onChange}\r\n              value={newTweetText}\r\n              required\r\n              placeholder=\"트윗을 수정하세요.\"\r\n              autoFocus\r\n              className=\"form-input\"\r\n            />\r\n\r\n            <input type=\"submit\" value=\"확인\" className=\"form-button\" />\r\n          </form>\r\n\r\n          <button onClick={onEditClick} className=\"form-button cancel-button\">\r\n            취소\r\n          </button>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <h4>{tweet.text}</h4>\r\n\r\n          {tweet.attachmentUrl && (\r\n            <img src={tweet.attachmentUrl} alt=\"\" width=\"50px\" height=\"50px\" />\r\n          )}\r\n\r\n          {isOwner && (\r\n            <div className=\"tweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n\r\n              <span onClick={onEditClick}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import { useState } from 'react';\r\nimport { v4 as uuidV4 } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { firestoreService, storageService } from 'firebaseApp';\r\n\r\nconst TweetFactory = ({ currentUser }) => {\r\n  const [tweet, setTweet] = useState('');\r\n  const [attachment, setAttachment] = useState('');\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (tweet === '') {\r\n      return;\r\n    }\r\n\r\n    let attachmentUrl = '';\r\n\r\n    // * 첨부 파일(사진)이 존재할 경우에만 스토리지 레퍼런스를 생성한다.\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${currentUser.uid}/${uuidV4()}`);\r\n\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    await firestoreService.collection('tweets').add({\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: currentUser.uid,\r\n      attachmentUrl,\r\n    });\r\n\r\n    setTweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setTweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const file = files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n\r\n    if (Boolean(file)) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment('');\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"tweet-factory-form\">\r\n      <div className=\"tweet-factory-form__container\">\r\n        <input\r\n          className=\"tweet-factory-form__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"100자 이내로 입력해 주세요.\"\r\n          maxLength={100}\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value=\"&rarr;\"\r\n          className=\"tweet-factory-form__arrow\"\r\n        />\r\n      </div>\r\n\r\n      <label htmlFor=\"attach-file\" className=\"tweet-factory-form__label\">\r\n        <span>사진 첨부</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{ opacity: 0 }}\r\n      />\r\n\r\n      {attachment && (\r\n        <div className=\"tweet-factory-form__attachment\">\r\n          <img\r\n            src={attachment}\r\n            alt=\"\"\r\n            style={{ backgroundImage: attachment }}\r\n          />\r\n\r\n          <div\r\n            className=\"tweet-factory-form__clear\"\r\n            onClick={onClearAttachment}\r\n          >\r\n            <span>삭제</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { firestoreService } from 'firebaseApp';\r\nimport Tweet from 'components/Tweet';\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ currentUser }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    firestoreService\r\n      .collection('tweets')\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot((snapshot) => {\r\n        const newTweets = snapshot.docs.map((document) => ({\r\n          id: document.id,\r\n          ...document.data(),\r\n        }));\r\n\r\n        setTweets(newTweets);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory currentUser={currentUser} />\r\n\r\n      <div style={{ marginTop: 90 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweet={tweet}\r\n            isOwner={tweet.creatorId === currentUser.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Fragment, useState } from 'react';\r\nimport { authService } from 'firebaseApp';\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  // * 신규 계정 → true\r\n  // * 기존 계정 -> false\r\n  const [isNewAccount, setIsNewAccount] = useState(true);\r\n\r\n  const [error, setError] = useState('');\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  // * 비동기 처리\r\n  const onSubmit = async (event) => {\r\n    // * 페이지 새로고침 방지 → React 상태 손실 방지\r\n    event.preventDefault();\r\n\r\n    try {\r\n      if (isNewAccount) {\r\n        // * 신규 계정일 경우 계정을 생성한다.\r\n        await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        // * 기존 계정일 경우 서비스에 접속한다.\r\n        await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setIsNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <Fragment>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          required\r\n          onChange={onChange}\r\n          className=\"auth-input\"\r\n        />\r\n\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"패스워드\"\r\n          value={password}\r\n          required\r\n          onChange={onChange}\r\n          className=\"auth-input\"\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value={isNewAccount ? '계정 생성' : '서비스 접속'}\r\n          className=\"auth-input auth-submit\"\r\n        />\r\n\r\n        {error && <span className=\"auth-error\">{error}</span>}\r\n      </form>\r\n\r\n      <span onClick={toggleAccount} className=\"auth-switch\">\r\n        {isNewAccount ? '서비스 접속' : '계정 생성'}\r\n      </span>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from 'firebaseApp';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport AuthForm from 'components/AuthForm';\r\n\r\nconst Auth = () => {\r\n  // * 비동기 처리\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#04AAFF'}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n\r\n      <AuthForm />\r\n\r\n      <div className=\"auth-buttons\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"auth-button\">\r\n          <FontAwesomeIcon icon={faGoogle} /> Google\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"auth-button\">\r\n          <FontAwesomeIcon icon={faGithub} /> GitHub\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport { authService } from 'firebaseApp';\r\n\r\nconst Profile = ({ currentUser, refreshUser }) => {\r\n  const history = useHistory();\r\n\r\n  const [newDisplayName, setNewDisplayName] = useState(currentUser.displayName);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (currentUser.displayName !== newDisplayName) {\r\n      await currentUser.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  const onSignOutClick = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n\r\n  // // TODO: 내가 작성한 트윗만 출력하는 기능 구현하기\r\n  // const getMyTweets = async () => {\r\n  //   const myTweets = await firestoreService\r\n  //     .collection('tweets')\r\n  //     .where('creatorId', '==', currentUser.uid)\r\n  //     .orderBy('createdAt', 'asc')\r\n  //     .get();\r\n\r\n  //   console.log(myTweets.docs.map((doc) => doc.data()));\r\n  // };\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profile-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"표시 이름\"\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n          autoFocus\r\n          className=\"form-input\"\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value=\"프로필 업데이트\"\r\n          className=\"form-button\"\r\n          style={{ marginTop: 10 }}\r\n        />\r\n      </form>\r\n\r\n      <span\r\n        className=\"form-button cancel-button sign-out\"\r\n        onClick={onSignOutClick}\r\n      >\r\n        접속해제\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Navigation from './Navigation';\r\n\r\n// 루트 라우트 목록\r\nimport Home from 'routes/Home';\r\nimport Auth from 'routes/Auth';\r\n\r\n// 서브 라우트 목록\r\nimport Profile from 'routes/Profile';\r\n\r\nconst AppRouter = ({ isSignedIn, currentUser, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {/* 접속 중일 때만 네비게이션을 보여준다. */}\r\n      {isSignedIn && <Navigation currentUser={currentUser} />}\r\n\r\n      <Switch>\r\n        {isSignedIn ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: '100%',\r\n              margin: '0 auto',\r\n              marginTop: '80',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home currentUser={currentUser} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile currentUser={currentUser} refreshUser={refreshUser} />\r\n            </Route>\r\n          </div>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import { Fragment, useState, useEffect } from 'react';\n\nimport AppRouter from 'components/Router';\nimport { authService } from 'firebaseApp';\n\nfunction App() {\n  // * true → 파이어베이스 초기화 완료\n  // * false → 파이어베이스 초기화 미완료\n  const [isInit, setIsInit] = useState(false);\n\n  // * 서비스에 접속한 사용자(계정)\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // * 현재 사용자 객체를 리프레시하는 메서드\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setCurrentUser({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // * 사용자 데이터가 존재할 경우\n        setCurrentUser({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        // * 사용자 데이터가 존재하지 않을 경우\n        setCurrentUser(false);\n      }\n\n      // * 파이어베이스 초기화 완료\n      setIsInit(true);\n    });\n  }, []);\n\n  return (\n    <Fragment>\n      {/* 파이어베이스 초기화 여부를 검사한다. */}\n      {isInit ? (\n        <AppRouter\n          isSignedIn={Boolean(currentUser)}\n          currentUser={currentUser}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        '로딩 중입니다...'\n      )}\n\n      {/* <footer>\n        &copy; {new Date().getFullYear()}. DEVELOPER POLARIS. All rights\n        reserved.\n      </footer> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\n\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/Navigation.js","firebaseApp.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["Navigation","currentUser","to","displayName","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","firestoreService","firestore","storageService","storage","Tweet","tweet","isOwner","useState","isEditable","setIsEditable","text","newTweetText","setNewTweetText","onDeleteClick","a","window","confirm","doc","id","delete","attachmentUrl","refFromURL","onEditClick","prev","onSubmit","event","preventDefault","update","onChange","value","target","required","type","onClick","src","alt","width","height","TweetFactory","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidV4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","placeholder","maxLength","accept","file","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newTweets","docs","map","document","data","AuthForm","email","setEmail","password","setPassword","isNewAccount","setIsNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isSignedIn","exact","path","App","isInit","setIsInit","setCurrentUser","onAuthStateChanged","user","args","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.128eee3b.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nconst Navigation = ({ currentUser }) => {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">홈</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/profile\">{currentUser.displayName}의 프로필</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const firestoreService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { useState } from 'react';\r\n\r\nimport { firestoreService, storageService } from 'firebaseApp';\r\n\r\nconst Tweet = ({ tweet, isOwner }) => {\r\n  const [isEditable, setIsEditable] = useState(false);\r\n  const [newTweetText, setNewTweetText] = useState(tweet.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const isDeleted = window.confirm('트윗을 삭제하시겠습니까?');\r\n\r\n    if (isDeleted) {\r\n      await firestoreService.doc(`tweets/${tweet.id}`).delete();\r\n\r\n      if (tweet.attachmentUrl !== '') {\r\n        await storageService.refFromURL(tweet.attachmentUrl).delete();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEditClick = () => setIsEditable((prev) => !prev);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setNewTweetText(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await firestoreService\r\n      .doc(`tweets/${tweet.id}`)\r\n      .update({ text: newTweetText });\r\n    setIsEditable(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isEditable ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input onChange={onChange} value={newTweetText} required />\r\n\r\n            <input type=\"submit\" value=\"확인\" />\r\n          </form>\r\n\r\n          <button onClick={onEditClick}>취소</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{tweet.text}</h4>\r\n\r\n          {tweet.attachmentUrl && (\r\n            <img src={tweet.attachmentUrl} alt=\"\" width=\"50px\" height=\"50px\" />\r\n          )}\r\n\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>삭제</button>\r\n              <button onClick={onEditClick}>편집</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import { useState } from 'react';\r\nimport { v4 as uuidV4 } from 'uuid';\r\n\r\nimport { firestoreService, storageService } from 'firebaseApp';\r\n\r\nconst TweetFactory = ({ currentUser }) => {\r\n  const [tweet, setTweet] = useState('');\r\n  const [attachment, setAttachment] = useState('');\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let attachmentUrl = '';\r\n\r\n    // * 첨부 파일(사진)이 존재할 경우에만 스토리지 레퍼런스를 생성한다.\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${currentUser.uid}/${uuidV4()}`);\r\n\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    await firestoreService.collection('tweets').add({\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: currentUser.uid,\r\n      attachmentUrl,\r\n    });\r\n\r\n    setTweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setTweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const file = files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment('');\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        value={tweet}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"100자 이내로 입력해 주세요.\"\r\n        maxLength={100}\r\n      />\r\n\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n\r\n      <input type=\"submit\" value=\"등록\" />\r\n\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} alt=\"\" width=\"50px\" height=\"50px\" />\r\n          <button onClick={onClearAttachment}>취소</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport { firestoreService } from 'firebaseApp';\r\nimport Tweet from 'components/Tweet';\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ currentUser }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    firestoreService.collection('tweets').onSnapshot((snapshot) => {\r\n      const newTweets = snapshot.docs.map((document) => ({\r\n        id: document.id,\r\n        ...document.data(),\r\n      }));\r\n\r\n      setTweets(newTweets);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <TweetFactory currentUser={currentUser} />\r\n\r\n      <div>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweet={tweet}\r\n            isOwner={tweet.creatorId === currentUser.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useState } from 'react';\r\nimport { authService } from 'firebaseApp';\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  // * 신규 계정 → true\r\n  // * 기존 계정 -> false\r\n  const [isNewAccount, setIsNewAccount] = useState(true);\r\n\r\n  const [error, setError] = useState('');\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  // * 비동기 처리\r\n  const onSubmit = async (event) => {\r\n    // * 페이지 새로고침 방지 → React 상태 손실 방지\r\n    event.preventDefault();\r\n\r\n    try {\r\n      if (isNewAccount) {\r\n        // * 신규 계정일 경우 계정을 생성한다.\r\n        await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        // * 기존 계정일 경우 서비스에 접속한다.\r\n        await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setIsNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          value={email}\r\n          required\r\n          onChange={onChange}\r\n        />\r\n\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"패스워드\"\r\n          value={password}\r\n          required\r\n          onChange={onChange}\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value={isNewAccount ? '계정 생성' : '서비스 접속'}\r\n        />\r\n\r\n        {error}\r\n      </form>\r\n\r\n      <span onClick={toggleAccount}>\r\n        {isNewAccount ? '서비스 접속' : '계정 생성'}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from 'firebaseApp';\r\nimport AuthForm from 'components/AuthForm';\r\n\r\nconst Auth = () => {\r\n  // * 비동기 처리\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">\r\n          Google 계정으로 접속\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\">\r\n          GitHub 계정으로 접속\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport { authService } from 'firebaseApp';\r\n\r\nconst Profile = ({ currentUser, refreshUser }) => {\r\n  const history = useHistory();\r\n\r\n  const [newDisplayName, setNewDisplayName] = useState(currentUser.displayName);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (currentUser.displayName !== newDisplayName) {\r\n      await currentUser.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  const onSignOutClick = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n\r\n  // // TODO: 내가 작성한 트윗만 출력하는 기능 구현하기\r\n  // const getMyTweets = async () => {\r\n  //   const myTweets = await firestoreService\r\n  //     .collection('tweets')\r\n  //     .where('creatorId', '==', currentUser.uid)\r\n  //     .orderBy('createdAt', 'asc')\r\n  //     .get();\r\n\r\n  //   console.log(myTweets.docs.map((doc) => doc.data()));\r\n  // };\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // }, []);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"표시 이름\"\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"프로필 업데이트\" />\r\n      </form>\r\n\r\n      <button onClick={onSignOutClick}>서비스 접속해제</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Navigation from './Navigation';\r\n\r\n// 루트 라우트 목록\r\nimport Home from 'routes/Home';\r\nimport Auth from 'routes/Auth';\r\n\r\n// 서브 라우트 목록\r\nimport Profile from 'routes/Profile';\r\n\r\nconst AppRouter = ({ isSignedIn, currentUser, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {/* 접속 중일 때만 네비게이션을 보여준다. */}\r\n      {isSignedIn && <Navigation currentUser={currentUser} />}\r\n\r\n      <Switch>\r\n        {isSignedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home currentUser={currentUser} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile currentUser={currentUser} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import { useState, useEffect } from 'react';\n\nimport AppRouter from 'components/Router';\nimport { authService } from 'firebaseApp';\n\nfunction App() {\n  // * true → 파이어베이스 초기화 완료\n  // * false → 파이어베이스 초기화 미완료\n  const [isInit, setIsInit] = useState(false);\n\n  // * 서비스에 접속한 사용자(계정)\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // * 현재 사용자 객체를 리프레시하는 메서드\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setCurrentUser({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // * 사용자 데이터가 존재할 경우\n        setCurrentUser({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        // * 사용자 데이터가 존재하지 않을 경우\n        setCurrentUser(false);\n      }\n\n      // * 파이어베이스 초기화 완료\n      setIsInit(true);\n    });\n  }, []);\n\n  return (\n    <>\n      {/* 파이어베이스 초기화 여부를 검사한다. */}\n      {isInit ? (\n        <AppRouter\n          isSignedIn={Boolean(currentUser)}\n          currentUser={currentUser}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        '로딩 중입니다...'\n      )}\n\n      {/* <footer>\n        &copy; {new Date().getFullYear()}. DEVELOPER POLARIS. All rights\n        reserved.\n      </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}